#!/command/with-contenv bashio
set -e

bashio::log.info 'Starting Multi VNC Proxy setup'

# Create web directories for each proxy
mkdir -p /var/www

# Copy noVNC files to each proxy port directory
for server in $(bashio::config 'vnc_servers|keys'); do
    proxy_port=$(bashio::config "vnc_servers[${server}].proxy_port")
    name=$(bashio::config "vnc_servers[${server}].name")
    
    bashio::log.info "Setting up web files for ${name} on port ${proxy_port}"
    
    # Create directory for this proxy
    mkdir -p "/var/www/port_${proxy_port}"
    cp -r /noVNC/* "/var/www/port_${proxy_port}/"
    
    # Configure noVNC settings for this specific server
    bashio::log.info "Configuring noVNC settings for ${name}"
    
    # For standard vnc.html - modify ui.js for compatibility
    sed -i "/UI.initSetting('show_dot'/ s/false/true/; /UI.initSetting('resize'/ s/off/scale/" "/var/www/port_${proxy_port}/app/ui.js"
    
    # For vnc_lite.html - no modification needed, it uses URL parameters
    bashio::log.info "vnc_lite.html will use URL parameters for configuration"
    
    # Create a redirect page with auto-login for convenience
    if bashio::config.has_value "vnc_servers[${server}].password"; then
        password=$(bashio::config "vnc_servers[${server}].password")
        bashio::log.info "Creating auto-login URLs for ${name}"
        
        # Create vnc_auto.html that redirects to vnc_lite.html with password
        cat > "/var/www/port_${proxy_port}/vnc_auto.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Auto-connecting to ${name}...</title>
    <script>
        window.location.href = 'vnc_lite.html?password=${password}&scale=true&cursor=true';
    </script>
</head>
<body>
    <p>Connecting to ${name}...</p>
</body>
</html>
EOF
    else
        # Create vnc_auto.html without password
        cat > "/var/www/port_${proxy_port}/vnc_auto.html" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Auto-connecting to ${name}...</title>
    <script>
        window.location.href = 'vnc_lite.html?scale=true&cursor=true';
    </script>
</head>
<body>
    <p>Connecting to ${name}...</p>
</body>
</html>
EOF
    fi
done

# Function to start websockify proxy for a server
start_proxy() {
    local server_key=$1
    local name=$(bashio::config "vnc_servers[${server_key}].name")
    local host=$(bashio::config "vnc_servers[${server_key}].host")
    local port=$(bashio::config "vnc_servers[${server_key}].port" "5900")
    local proxy_port=$(bashio::config "vnc_servers[${server_key}].proxy_port")
    
    bashio::log.info "Starting proxy for ${name}: ${host}:${port} -> 0.0.0.0:${proxy_port}"
    
    # Start websockify with web files in background
    cd "/var/www/port_${proxy_port}"
    nohup /usr/local/bin/websockify \
        --web="/var/www/port_${proxy_port}" \
        "0.0.0.0:${proxy_port}" \
        "${host}:${port}" \
        > "/var/log/websockify_${proxy_port}.log" 2>&1 &
    
    local pid=$!
    echo "$pid" > "/var/run/websockify_${proxy_port}.pid"
    bashio::log.info "Started proxy for ${name} with PID ${pid}"
}

# Start all proxies
server_count=0
for server in $(bashio::config 'vnc_servers|keys'); do
    start_proxy "$server"
    server_count=$((server_count + 1))
    sleep 2  # Small delay between starting proxies
done

bashio::log.info "Started ${server_count} VNC proxies"

# Log access information
bashio::log.info "VNC Proxies are now available:"
for server in $(bashio::config 'vnc_servers|keys'); do
    name=$(bashio::config "vnc_servers[${server}].name")
    host=$(bashio::config "vnc_servers[${server}].host")
    port=$(bashio::config "vnc_servers[${server}].port" "5900")
    proxy_port=$(bashio::config "vnc_servers[${server}].proxy_port")
    
    if bashio::config.has_value "vnc_servers[${server}].password"; then
        password=$(bashio::config "vnc_servers[${server}].password")
        bashio::log.info "  ${name}:"
        bashio::log.info "    Auto-login: http://YOUR_HA_IP:${proxy_port}/vnc_auto.html"
        bashio::log.info "    With password: http://YOUR_HA_IP:${proxy_port}/vnc_lite.html?password=${password}"
        bashio::log.info "    Standard: http://YOUR_HA_IP:${proxy_port}/vnc.html"
    else
        bashio::log.info "  ${name}:"
        bashio::log.info "    Direct: http://YOUR_HA_IP:${proxy_port}/vnc_lite.html"
        bashio::log.info "    Standard: http://YOUR_HA_IP:${proxy_port}/vnc.html"
    fi
    bashio::log.info "    Target: ${host}:${port}"
done

# Keep the container running by monitoring the processes
bashio::log.info "Monitoring proxy processes..."

while true; do
    sleep 30
    
    # Check if all proxies are still running
    for server in $(bashio::config 'vnc_servers|keys'); do
        proxy_port=$(bashio::config "vnc_servers[${server}].proxy_port")
        name=$(bashio::config "vnc_servers[${server}].name")
        
        if [ -f "/var/run/websockify_${proxy_port}.pid" ]; then
            pid=$(cat "/var/run/websockify_${proxy_port}.pid")
            if ! kill -0 "$pid" 2>/dev/null; then
                bashio::log.warning "Proxy for ${name} (port ${proxy_port}) died, restarting..."
                rm -f "/var/run/websockify_${proxy_port}.pid"
                start_proxy "$server"
            fi
        else
            bashio::log.warning "PID file for ${name} (port ${proxy_port}) missing, restarting..."
            start_proxy "$server"
        fi
    done
done